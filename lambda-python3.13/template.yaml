AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  lambda-python3.13

  Sample SAM Template for lambda-python3.13

Parameters:
  TicketLineChannelID:
    Type: String
  TicketLineChannelSecret:
    Type: String

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
  Api:
    Cors:
      AllowMethods: "'OPTIONS,POST'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'" # This is a wildcard. You can specify a specific domain or use '*' for all domains.

Resources:
  TicketLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: TicketLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:BatchGetItem
                  - dynamodb:Describe*
                  - dynamodb:List*
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - ssm:GetParameter
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
  ApiGatewayCloudWatchRoleArn:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayCloudWatchRole.Arn
  ApiGatewayCloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: apigateway.amazonaws.com
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      MethodSettings:
        - ResourcePath: /*
          HttpMethod: '*'
          LoggingLevel: "INFO"
          DataTraceEnabled: true
          MetricsEnabled: true
  PushNotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: push_notification/
      Handler: app.lambda_handler
      Runtime: python3.13
      Architectures:
        - x86_64
      Role: !GetAtt TicketLambdaRole.Arn
      Events:
        PushNotification:
          Type: Api
          Properties:
            Path: /push_notification
            Method: post
            RestApiId: !Ref ApiGateway
  CheckTicketFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: check_ticket/
      Handler: app.lambda_handler
      Runtime: python3.13
      MemorySize: 128
      Timeout: 20
      Architectures:
        - x86_64
      Role: !GetAtt TicketLambdaRole.Arn
      Environment:
        Variables:
          TICKET_LINE_CHANNEL_ID: !Ref TicketLineChannelID
          TICKET_LINE_CHANNEL_SECRET: !Ref TicketLineChannelSecret
      Events:
        CheckTicket:
          Type: Schedule
          Properties:
            Schedule: rate(1 minute)
            Name: CheckTicketSchedule
            Description: "Scheduled event to check ticket availability every minute"
            Enabled: true

# Outputs:
#   # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
#   # Find out more about other implicit resources you can reference within SAM
#   # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
#   HelloWorldApi:
#     Description: "API Gateway endpoint URL for Prod stage for Hello World function"
#     Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
#   HelloWorldFunction:
#     Description: "Hello World Lambda Function ARN"
#     Value: !GetAtt HelloWorldFunction.Arn
#   HelloWorldFunctionIamRole:
#     Description: "Implicit IAM Role created for Hello World function"
#     Value: !GetAtt HelloWorldFunctionRole.Arn
